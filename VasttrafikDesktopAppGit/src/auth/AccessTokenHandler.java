package auth;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.json.JSONException;
import org.json.JSONObject;

public class AccessTokenHandler {
	
	private AccessTokenHandler() {}
	
	/**
	 * Generates an access token used for calling the Västtrafik API and uses 
	 * AccessTokenHandler.storeAccessToken to store the token. If the method 
	 * is called again within 59 minutes the previously stored token will be used. 
	 */
	public static String generateAccessToken() {
		
		HttpClient httpclient = HttpClientBuilder.create().build();
		HttpPost httppost = new HttpPost("https://api.vasttrafik.se/token");
		
		if(AccessTokenHandler.invalidExistingAccessToken()) {
			try {		
				List<NameValuePair> params = new ArrayList<NameValuePair>();
				
				//Parameters set according to Västrafiks' OAuth2 guide: developer.vasttrafik.se/portal/#/guides/oauth2
				params.add(new BasicNameValuePair("grant_type","client_credentials"));
				params.add(new BasicNameValuePair("Content-Type","application/x-www-form-urlencoded"));
				
				//Authorization generated by Base64 encoding "client_id:client_secret" on: base64encode.org/				
				params.add(new BasicNameValuePair("Authorization", //INSERT BASE64 ENCODED AUTORIZATION AS STRING in format "Basic encodedAuth".
						));
				
				//client_secret and client_id (hemlighet och nyckel) is recieved by creating a application on: developer.vasttrafik.se/				
				params.add(new BasicNameValuePair("client_secret", //"HEMLIGHET" AS STRING 
						));
				params.add(new BasicNameValuePair("client_id", //"NYCKEL" AS STRING
						));
				params.add(new BasicNameValuePair("scope", DeviceIdHandler.deviceId()));
				httppost.setEntity(new UrlEncodedFormEntity(params));
	
				HttpResponse response = httpclient.execute(httppost);
	
				JSONObject json_auth = new JSONObject(EntityUtils.toString(response.getEntity()));
				String accessToken = json_auth.get("access_token").toString();
				AccessToken a = new AccessToken(accessToken);
				AccessTokenHandler.storeAccessToken(a);
				return accessToken;
			}catch(ClientProtocolException e) {
				e.printStackTrace();
			}catch(IOException e) {
				e.printStackTrace();
			}catch(JSONException e) {
				e.printStackTrace();
			}
		}else {
			AccessToken a = AccessTokenHandler.datFileInstance();
			return a.accessToken();
		}
		
		return "Error in generating access token";
	}

	/**
	 * Takes a AccessToken instance and stores it in the accessToken.dat file 
	 * to be able to use it between boots of application.
	 * @param accessToken AccessToken
	 */
	public static void storeAccessToken(AccessToken accessToken) {
		ObjectOutputStream oos = null;
		
		if(!(new File("accessToken.dat").exists())) {
			new File("accessToken.dat");
		}
		
		try {
			oos = new ObjectOutputStream(new FileOutputStream("accessToken.dat"));
			oos.writeObject(accessToken);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				oos.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * Checks if the AccessToken in the file accessToken.dat is valid or not.
	 * Returns false if still valid and true if invalid. Used for deciding if
	 * a new access token should be called for from Västtrafik.
	 * @return boolean
	 */
	public static boolean invalidExistingAccessToken() {
		ObjectInputStream ois = null;
		
		if(!(new File("accessToken.dat").exists())) {			
			return true;
		}else {
			try {
				ois = new ObjectInputStream(new FileInputStream("accessToken.dat"));
				AccessToken accessToken = (AccessToken) ois.readObject();
				return accessToken.oneHourSinceCreation();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				System.err.println(e.getMessage());
				e.printStackTrace();
			}finally {
				try {
					ois.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return true;
	}
	
	/**
	 * Returns an instance of the AccessToken object that is stored in the
	 * file accessToken.dat. Can be used for accessing the stored instances' 
	 * properties.	
	 * @return AccessToken
	 */
	public static AccessToken datFileInstance() {
		ObjectInputStream ois = null;
		
		if(!(new File("accessToken.dat").exists())) {
			System.err.println("Hittar inte accessToken.dat");
			return null;
		}else {
			try {
				ois = new ObjectInputStream(new FileInputStream("accessToken.dat"));
				AccessToken accessToken = (AccessToken) ois.readObject();
				return accessToken;
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				System.err.println(e.getMessage());
				e.printStackTrace();
			}finally {
				try {
					ois.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return null;
	}


}
